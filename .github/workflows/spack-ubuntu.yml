name: spack-ubuntu

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: $(echo ${GITHUB_REPOSITORY/"LIHPC-Computational-Geometry/"/})

jobs:
  init:
    name: ${{ matrix.config }}
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Linux, Windows or Mac.
    runs-on: ubuntu-latest
    container:
      image: lihpccg/mgx-ubuntu.22.04-spack.0.19.0:latest
    strategy:
      fail-fast: false
      matrix:
        config: [Release, Debug]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2 # seems to be needed by codecov
          submodules: recursive

      - name: Initialize the dev environment
        shell: bash
        run : |
          source /spack/share/spack/setup-env.sh
          git clone --depth=1 https://github.com/LIHPC-Computational-Geometry/spack_recipes_meshing.git
          spack repo add ./spack_recipes_meshing/meshing_repo
          spack repo add ./spack_recipes_meshing/supersede_repo

      - name: Build and install with spack
        shell: bash
        run: |
          source /spack/share/spack/setup-env.sh 
          spack env activate meshing-env
          spack add pythonutil
          # we use GITHUB_WORKSPACE instead of github.Workspace because in containers it
          # seems to be incorrect (see https://github.com/actions/runner/issues/2058)
          spack develop -p $GITHUB_WORKSPACE --no-clone pythonutil@5.6.6
          spack install --no-checksum
          echo REPO = $PROJECT_NAME
          echo "SPACK_MODULE_DIR=$(spack location --install-dir pythonutil)" >> $GITHUB_ENV

      - name: Build with cmake
        shell: bash
        run: |
          source /spack/share/spack/setup-env.sh 
          # now we build using cmake with spack provided build variables
          # 26/01/2023 - spack load does not set cmake variables coming from spack recipe.
          # Instead the spack-build-env.txt file is used
          #   spack load --only dependencies --sh pythonutil > spack_env_file.sh
          #   source spack_env_file.sh
          echo SMD=  ${{ env.SPACK_MODULE_DIR }}
          source ${{ env.SPACK_MODULE_DIR }}/.spack/spack-build-env.txt
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -S . -B build
          cmake --build build
          #make test

      - name: Test C++ lib install
        shell: bash
        run: |
          source /spack/share/spack/setup-env.sh
          spack env activate meshing-env
          spack load pythonutil
          cd test_link/
          cmake -S . -B build_exe
          cmake --build build_exe
          cd build_exe
          ctest
